<?php
/**
 * InlineResponse2003
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PIX-BB
 *
 * API para gerenciar os serviços referentes ao PIX (Sistema de Pagamentos Instantâneos) no BB.
 *
 * OpenAPI spec version: 1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2003 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2003 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codigo_estado' => 'int',
'timestamp' => 'string',
'valor' => 'float',
'codigo_tipo_pessoa_recebedor' => 'int',
'cpf_cnpj_recebedor' => 'int',
'codigo_solicitacao_banco_central_brasil' => 'string',
'codigo_banco_recebedor' => 'int',
'nome_banco_recebedor' => 'string',
'codigo_tipo_pessoa_pagador' => 'int',
'cpf_cnpj_pagador' => 'int',
'codigo_banco_pagador' => 'int',
'nome_banco_pagador' => 'string',
'codigo_identificador_solicitacao_pagamento_instantaneo' => 'string',
'codigo_conciliacao_recebedor' => 'string',
'descricao_pagamento_pagador' => 'string',
'descricao_complementar_pagador' => 'string',
'codigo_erro_pagamento' => 'string',
'texto_erro' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codigo_estado' => 'int32',
'timestamp' => null,
'valor' => 'float',
'codigo_tipo_pessoa_recebedor' => 'int32',
'cpf_cnpj_recebedor' => 'int64',
'codigo_solicitacao_banco_central_brasil' => null,
'codigo_banco_recebedor' => 'int32',
'nome_banco_recebedor' => null,
'codigo_tipo_pessoa_pagador' => 'int32',
'cpf_cnpj_pagador' => 'int64',
'codigo_banco_pagador' => 'int32',
'nome_banco_pagador' => null,
'codigo_identificador_solicitacao_pagamento_instantaneo' => null,
'codigo_conciliacao_recebedor' => null,
'descricao_pagamento_pagador' => null,
'descricao_complementar_pagador' => null,
'codigo_erro_pagamento' => null,
'texto_erro' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codigo_estado' => 'codigoEstado',
'timestamp' => 'timestamp',
'valor' => 'valor',
'codigo_tipo_pessoa_recebedor' => 'codigoTipoPessoaRecebedor',
'cpf_cnpj_recebedor' => 'cpfCnpjRecebedor',
'codigo_solicitacao_banco_central_brasil' => 'codigoSolicitacaoBancoCentralBrasil',
'codigo_banco_recebedor' => 'codigoBancoRecebedor',
'nome_banco_recebedor' => 'nomeBancoRecebedor',
'codigo_tipo_pessoa_pagador' => 'codigoTipoPessoaPagador',
'cpf_cnpj_pagador' => 'cpfCnpjPagador',
'codigo_banco_pagador' => 'codigoBancoPagador',
'nome_banco_pagador' => 'nomeBancoPagador',
'codigo_identificador_solicitacao_pagamento_instantaneo' => 'codigoIdentificadorSolicitacaoPagamentoInstantaneo',
'codigo_conciliacao_recebedor' => 'codigoConciliacaoRecebedor',
'descricao_pagamento_pagador' => 'descricaoPagamentoPagador',
'descricao_complementar_pagador' => 'descricaoComplementarPagador',
'codigo_erro_pagamento' => 'codigoErroPagamento',
'texto_erro' => 'textoErro'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codigo_estado' => 'setCodigoEstado',
'timestamp' => 'setTimestamp',
'valor' => 'setValor',
'codigo_tipo_pessoa_recebedor' => 'setCodigoTipoPessoaRecebedor',
'cpf_cnpj_recebedor' => 'setCpfCnpjRecebedor',
'codigo_solicitacao_banco_central_brasil' => 'setCodigoSolicitacaoBancoCentralBrasil',
'codigo_banco_recebedor' => 'setCodigoBancoRecebedor',
'nome_banco_recebedor' => 'setNomeBancoRecebedor',
'codigo_tipo_pessoa_pagador' => 'setCodigoTipoPessoaPagador',
'cpf_cnpj_pagador' => 'setCpfCnpjPagador',
'codigo_banco_pagador' => 'setCodigoBancoPagador',
'nome_banco_pagador' => 'setNomeBancoPagador',
'codigo_identificador_solicitacao_pagamento_instantaneo' => 'setCodigoIdentificadorSolicitacaoPagamentoInstantaneo',
'codigo_conciliacao_recebedor' => 'setCodigoConciliacaoRecebedor',
'descricao_pagamento_pagador' => 'setDescricaoPagamentoPagador',
'descricao_complementar_pagador' => 'setDescricaoComplementarPagador',
'codigo_erro_pagamento' => 'setCodigoErroPagamento',
'texto_erro' => 'setTextoErro'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codigo_estado' => 'getCodigoEstado',
'timestamp' => 'getTimestamp',
'valor' => 'getValor',
'codigo_tipo_pessoa_recebedor' => 'getCodigoTipoPessoaRecebedor',
'cpf_cnpj_recebedor' => 'getCpfCnpjRecebedor',
'codigo_solicitacao_banco_central_brasil' => 'getCodigoSolicitacaoBancoCentralBrasil',
'codigo_banco_recebedor' => 'getCodigoBancoRecebedor',
'nome_banco_recebedor' => 'getNomeBancoRecebedor',
'codigo_tipo_pessoa_pagador' => 'getCodigoTipoPessoaPagador',
'cpf_cnpj_pagador' => 'getCpfCnpjPagador',
'codigo_banco_pagador' => 'getCodigoBancoPagador',
'nome_banco_pagador' => 'getNomeBancoPagador',
'codigo_identificador_solicitacao_pagamento_instantaneo' => 'getCodigoIdentificadorSolicitacaoPagamentoInstantaneo',
'codigo_conciliacao_recebedor' => 'getCodigoConciliacaoRecebedor',
'descricao_pagamento_pagador' => 'getDescricaoPagamentoPagador',
'descricao_complementar_pagador' => 'getDescricaoComplementarPagador',
'codigo_erro_pagamento' => 'getCodigoErroPagamento',
'texto_erro' => 'getTextoErro'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codigo_estado'] = isset($data['codigo_estado']) ? $data['codigo_estado'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['valor'] = isset($data['valor']) ? $data['valor'] : null;
        $this->container['codigo_tipo_pessoa_recebedor'] = isset($data['codigo_tipo_pessoa_recebedor']) ? $data['codigo_tipo_pessoa_recebedor'] : null;
        $this->container['cpf_cnpj_recebedor'] = isset($data['cpf_cnpj_recebedor']) ? $data['cpf_cnpj_recebedor'] : null;
        $this->container['codigo_solicitacao_banco_central_brasil'] = isset($data['codigo_solicitacao_banco_central_brasil']) ? $data['codigo_solicitacao_banco_central_brasil'] : null;
        $this->container['codigo_banco_recebedor'] = isset($data['codigo_banco_recebedor']) ? $data['codigo_banco_recebedor'] : null;
        $this->container['nome_banco_recebedor'] = isset($data['nome_banco_recebedor']) ? $data['nome_banco_recebedor'] : null;
        $this->container['codigo_tipo_pessoa_pagador'] = isset($data['codigo_tipo_pessoa_pagador']) ? $data['codigo_tipo_pessoa_pagador'] : null;
        $this->container['cpf_cnpj_pagador'] = isset($data['cpf_cnpj_pagador']) ? $data['cpf_cnpj_pagador'] : null;
        $this->container['codigo_banco_pagador'] = isset($data['codigo_banco_pagador']) ? $data['codigo_banco_pagador'] : null;
        $this->container['nome_banco_pagador'] = isset($data['nome_banco_pagador']) ? $data['nome_banco_pagador'] : null;
        $this->container['codigo_identificador_solicitacao_pagamento_instantaneo'] = isset($data['codigo_identificador_solicitacao_pagamento_instantaneo']) ? $data['codigo_identificador_solicitacao_pagamento_instantaneo'] : null;
        $this->container['codigo_conciliacao_recebedor'] = isset($data['codigo_conciliacao_recebedor']) ? $data['codigo_conciliacao_recebedor'] : null;
        $this->container['descricao_pagamento_pagador'] = isset($data['descricao_pagamento_pagador']) ? $data['descricao_pagamento_pagador'] : null;
        $this->container['descricao_complementar_pagador'] = isset($data['descricao_complementar_pagador']) ? $data['descricao_complementar_pagador'] : null;
        $this->container['codigo_erro_pagamento'] = isset($data['codigo_erro_pagamento']) ? $data['codigo_erro_pagamento'] : null;
        $this->container['texto_erro'] = isset($data['texto_erro']) ? $data['texto_erro'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['codigo_estado'] === null) {
            $invalidProperties[] = "'codigo_estado' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['valor'] === null) {
            $invalidProperties[] = "'valor' can't be null";
        }
        if ($this->container['codigo_tipo_pessoa_recebedor'] === null) {
            $invalidProperties[] = "'codigo_tipo_pessoa_recebedor' can't be null";
        }
        if ($this->container['cpf_cnpj_recebedor'] === null) {
            $invalidProperties[] = "'cpf_cnpj_recebedor' can't be null";
        }
        if ($this->container['codigo_solicitacao_banco_central_brasil'] === null) {
            $invalidProperties[] = "'codigo_solicitacao_banco_central_brasil' can't be null";
        }
        if ($this->container['codigo_banco_recebedor'] === null) {
            $invalidProperties[] = "'codigo_banco_recebedor' can't be null";
        }
        if ($this->container['nome_banco_recebedor'] === null) {
            $invalidProperties[] = "'nome_banco_recebedor' can't be null";
        }
        if ($this->container['codigo_tipo_pessoa_pagador'] === null) {
            $invalidProperties[] = "'codigo_tipo_pessoa_pagador' can't be null";
        }
        if ($this->container['cpf_cnpj_pagador'] === null) {
            $invalidProperties[] = "'cpf_cnpj_pagador' can't be null";
        }
        if ($this->container['codigo_banco_pagador'] === null) {
            $invalidProperties[] = "'codigo_banco_pagador' can't be null";
        }
        if ($this->container['nome_banco_pagador'] === null) {
            $invalidProperties[] = "'nome_banco_pagador' can't be null";
        }
        if ($this->container['codigo_identificador_solicitacao_pagamento_instantaneo'] === null) {
            $invalidProperties[] = "'codigo_identificador_solicitacao_pagamento_instantaneo' can't be null";
        }
        if ($this->container['codigo_conciliacao_recebedor'] === null) {
            $invalidProperties[] = "'codigo_conciliacao_recebedor' can't be null";
        }
        if ($this->container['descricao_pagamento_pagador'] === null) {
            $invalidProperties[] = "'descricao_pagamento_pagador' can't be null";
        }
        if ($this->container['descricao_complementar_pagador'] === null) {
            $invalidProperties[] = "'descricao_complementar_pagador' can't be null";
        }
        if ($this->container['codigo_erro_pagamento'] === null) {
            $invalidProperties[] = "'codigo_erro_pagamento' can't be null";
        }
        if ($this->container['texto_erro'] === null) {
            $invalidProperties[] = "'texto_erro' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codigo_estado
     *
     * @return int
     */
    public function getCodigoEstado()
    {
        return $this->container['codigo_estado'];
    }

    /**
     * Sets codigo_estado
     *
     * @param int $codigo_estado Codigo Estado Pagamento
     *
     * @return $this
     */
    public function setCodigoEstado($codigo_estado)
    {
        $this->container['codigo_estado'] = $codigo_estado;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Horário em que o Pix foi processado no PSP.
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets valor
     *
     * @return float
     */
    public function getValor()
    {
        return $this->container['valor'];
    }

    /**
     * Sets valor
     *
     * @param float $valor Valor do pagamento (pix)
     *
     * @return $this
     */
    public function setValor($valor)
    {
        $this->container['valor'] = $valor;

        return $this;
    }

    /**
     * Gets codigo_tipo_pessoa_recebedor
     *
     * @return int
     */
    public function getCodigoTipoPessoaRecebedor()
    {
        return $this->container['codigo_tipo_pessoa_recebedor'];
    }

    /**
     * Sets codigo_tipo_pessoa_recebedor
     *
     * @param int $codigo_tipo_pessoa_recebedor Código que informa se o recebedor é PF ou PJ
     *
     * @return $this
     */
    public function setCodigoTipoPessoaRecebedor($codigo_tipo_pessoa_recebedor)
    {
        $this->container['codigo_tipo_pessoa_recebedor'] = $codigo_tipo_pessoa_recebedor;

        return $this;
    }

    /**
     * Gets cpf_cnpj_recebedor
     *
     * @return int
     */
    public function getCpfCnpjRecebedor()
    {
        return $this->container['cpf_cnpj_recebedor'];
    }

    /**
     * Sets cpf_cnpj_recebedor
     *
     * @param int $cpf_cnpj_recebedor Informa o CNPJ do recebedor.
     *
     * @return $this
     */
    public function setCpfCnpjRecebedor($cpf_cnpj_recebedor)
    {
        $this->container['cpf_cnpj_recebedor'] = $cpf_cnpj_recebedor;

        return $this;
    }

    /**
     * Gets codigo_solicitacao_banco_central_brasil
     *
     * @return string
     */
    public function getCodigoSolicitacaoBancoCentralBrasil()
    {
        return $this->container['codigo_solicitacao_banco_central_brasil'];
    }

    /**
     * Sets codigo_solicitacao_banco_central_brasil
     *
     * @param string $codigo_solicitacao_banco_central_brasil Chave DICT do Recebedor cadastrada no Banco Central.
     *
     * @return $this
     */
    public function setCodigoSolicitacaoBancoCentralBrasil($codigo_solicitacao_banco_central_brasil)
    {
        $this->container['codigo_solicitacao_banco_central_brasil'] = $codigo_solicitacao_banco_central_brasil;

        return $this;
    }

    /**
     * Gets codigo_banco_recebedor
     *
     * @return int
     */
    public function getCodigoBancoRecebedor()
    {
        return $this->container['codigo_banco_recebedor'];
    }

    /**
     * Sets codigo_banco_recebedor
     *
     * @param int $codigo_banco_recebedor Codigo da Instituicao Financeira Banco Recebedor
     *
     * @return $this
     */
    public function setCodigoBancoRecebedor($codigo_banco_recebedor)
    {
        $this->container['codigo_banco_recebedor'] = $codigo_banco_recebedor;

        return $this;
    }

    /**
     * Gets nome_banco_recebedor
     *
     * @return string
     */
    public function getNomeBancoRecebedor()
    {
        return $this->container['nome_banco_recebedor'];
    }

    /**
     * Sets nome_banco_recebedor
     *
     * @param string $nome_banco_recebedor Nome de identificação da instituição Financeira Banco Recebedor
     *
     * @return $this
     */
    public function setNomeBancoRecebedor($nome_banco_recebedor)
    {
        $this->container['nome_banco_recebedor'] = $nome_banco_recebedor;

        return $this;
    }

    /**
     * Gets codigo_tipo_pessoa_pagador
     *
     * @return int
     */
    public function getCodigoTipoPessoaPagador()
    {
        return $this->container['codigo_tipo_pessoa_pagador'];
    }

    /**
     * Sets codigo_tipo_pessoa_pagador
     *
     * @param int $codigo_tipo_pessoa_pagador Codigo Tipo Pessoa Pagador
     *
     * @return $this
     */
    public function setCodigoTipoPessoaPagador($codigo_tipo_pessoa_pagador)
    {
        $this->container['codigo_tipo_pessoa_pagador'] = $codigo_tipo_pessoa_pagador;

        return $this;
    }

    /**
     * Gets cpf_cnpj_pagador
     *
     * @return int
     */
    public function getCpfCnpjPagador()
    {
        return $this->container['cpf_cnpj_pagador'];
    }

    /**
     * Sets cpf_cnpj_pagador
     *
     * @param int $cpf_cnpj_pagador CPF/CNPJ Pagador
     *
     * @return $this
     */
    public function setCpfCnpjPagador($cpf_cnpj_pagador)
    {
        $this->container['cpf_cnpj_pagador'] = $cpf_cnpj_pagador;

        return $this;
    }

    /**
     * Gets codigo_banco_pagador
     *
     * @return int
     */
    public function getCodigoBancoPagador()
    {
        return $this->container['codigo_banco_pagador'];
    }

    /**
     * Sets codigo_banco_pagador
     *
     * @param int $codigo_banco_pagador Codigo Instituicao Financeira Banco Pagador
     *
     * @return $this
     */
    public function setCodigoBancoPagador($codigo_banco_pagador)
    {
        $this->container['codigo_banco_pagador'] = $codigo_banco_pagador;

        return $this;
    }

    /**
     * Gets nome_banco_pagador
     *
     * @return string
     */
    public function getNomeBancoPagador()
    {
        return $this->container['nome_banco_pagador'];
    }

    /**
     * Sets nome_banco_pagador
     *
     * @param string $nome_banco_pagador Nome de identificação da instituição Financeira Banco Pagador
     *
     * @return $this
     */
    public function setNomeBancoPagador($nome_banco_pagador)
    {
        $this->container['nome_banco_pagador'] = $nome_banco_pagador;

        return $this;
    }

    /**
     * Gets codigo_identificador_solicitacao_pagamento_instantaneo
     *
     * @return string
     */
    public function getCodigoIdentificadorSolicitacaoPagamentoInstantaneo()
    {
        return $this->container['codigo_identificador_solicitacao_pagamento_instantaneo'];
    }

    /**
     * Sets codigo_identificador_solicitacao_pagamento_instantaneo
     *
     * @param string $codigo_identificador_solicitacao_pagamento_instantaneo Codigo Identificador Solicitacao Sistema De Pagamento Instantaneo
     *
     * @return $this
     */
    public function setCodigoIdentificadorSolicitacaoPagamentoInstantaneo($codigo_identificador_solicitacao_pagamento_instantaneo)
    {
        $this->container['codigo_identificador_solicitacao_pagamento_instantaneo'] = $codigo_identificador_solicitacao_pagamento_instantaneo;

        return $this;
    }

    /**
     * Gets codigo_conciliacao_recebedor
     *
     * @return string
     */
    public function getCodigoConciliacaoRecebedor()
    {
        return $this->container['codigo_conciliacao_recebedor'];
    }

    /**
     * Sets codigo_conciliacao_recebedor
     *
     * @param string $codigo_conciliacao_recebedor Codigo Chave Conciliacao Recebedor
     *
     * @return $this
     */
    public function setCodigoConciliacaoRecebedor($codigo_conciliacao_recebedor)
    {
        $this->container['codigo_conciliacao_recebedor'] = $codigo_conciliacao_recebedor;

        return $this;
    }

    /**
     * Gets descricao_pagamento_pagador
     *
     * @return string
     */
    public function getDescricaoPagamentoPagador()
    {
        return $this->container['descricao_pagamento_pagador'];
    }

    /**
     * Sets descricao_pagamento_pagador
     *
     * @param string $descricao_pagamento_pagador Texto Descricao Pagador
     *
     * @return $this
     */
    public function setDescricaoPagamentoPagador($descricao_pagamento_pagador)
    {
        $this->container['descricao_pagamento_pagador'] = $descricao_pagamento_pagador;

        return $this;
    }

    /**
     * Gets descricao_complementar_pagador
     *
     * @return string
     */
    public function getDescricaoComplementarPagador()
    {
        return $this->container['descricao_complementar_pagador'];
    }

    /**
     * Sets descricao_complementar_pagador
     *
     * @param string $descricao_complementar_pagador Texto Complementar Pagador
     *
     * @return $this
     */
    public function setDescricaoComplementarPagador($descricao_complementar_pagador)
    {
        $this->container['descricao_complementar_pagador'] = $descricao_complementar_pagador;

        return $this;
    }

    /**
     * Gets codigo_erro_pagamento
     *
     * @return string
     */
    public function getCodigoErroPagamento()
    {
        return $this->container['codigo_erro_pagamento'];
    }

    /**
     * Sets codigo_erro_pagamento
     *
     * @param string $codigo_erro_pagamento Código do motivo do erro de pagamento
     *
     * @return $this
     */
    public function setCodigoErroPagamento($codigo_erro_pagamento)
    {
        $this->container['codigo_erro_pagamento'] = $codigo_erro_pagamento;

        return $this;
    }

    /**
     * Gets texto_erro
     *
     * @return string
     */
    public function getTextoErro()
    {
        return $this->container['texto_erro'];
    }

    /**
     * Sets texto_erro
     *
     * @param string $texto_erro Texto complementar do erro
     *
     * @return $this
     */
    public function setTextoErro($texto_erro)
    {
        $this->container['texto_erro'] = $texto_erro;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
