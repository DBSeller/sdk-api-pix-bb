<?php
/**
 * QrCodesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PIX-BB
 *
 * API para gerenciar os serviços referentes ao PIX (Sistema de Pagamentos Instantâneos) no BB.
 *
 * OpenAPI spec version: 1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * QrCodesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QrCodesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation alteraQrCodeArrecadacao
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesIdBody $body body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse201
     */
    public function alteraQrCodeArrecadacao($body, $authorization, $gw_app_key, $id)
    {
        list($response) = $this->alteraQrCodeArrecadacaoWithHttpInfo($body, $authorization, $gw_app_key, $id);
        return $response;
    }

    /**
     * Operation alteraQrCodeArrecadacaoWithHttpInfo
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesIdBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function alteraQrCodeArrecadacaoWithHttpInfo($body, $authorization, $gw_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse201';
        $request = $this->alteraQrCodeArrecadacaoRequest($body, $authorization, $gw_app_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alteraQrCodeArrecadacaoAsync
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesIdBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alteraQrCodeArrecadacaoAsync($body, $authorization, $gw_app_key, $id)
    {
        return $this->alteraQrCodeArrecadacaoAsyncWithHttpInfo($body, $authorization, $gw_app_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alteraQrCodeArrecadacaoAsyncWithHttpInfo
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesIdBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alteraQrCodeArrecadacaoAsyncWithHttpInfo($body, $authorization, $gw_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse201';
        $request = $this->alteraQrCodeArrecadacaoRequest($body, $authorization, $gw_app_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alteraQrCodeArrecadacao'
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesIdBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function alteraQrCodeArrecadacaoRequest($body, $authorization, $gw_app_key, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alteraQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling alteraQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling alteraQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling alteraQrCodeArrecadacao'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarQRCode
     *
     * Baixar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\IdBaixarBody $body body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function baixarQRCode($body, $authorization, $gw_app_key, $id)
    {
        list($response) = $this->baixarQRCodeWithHttpInfo($body, $authorization, $gw_app_key, $id);
        return $response;
    }

    /**
     * Operation baixarQRCodeWithHttpInfo
     *
     * Baixar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\IdBaixarBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarQRCodeWithHttpInfo($body, $authorization, $gw_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->baixarQRCodeRequest($body, $authorization, $gw_app_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarQRCodeAsync
     *
     * Baixar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\IdBaixarBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarQRCodeAsync($body, $authorization, $gw_app_key, $id)
    {
        return $this->baixarQRCodeAsyncWithHttpInfo($body, $authorization, $gw_app_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarQRCodeAsyncWithHttpInfo
     *
     * Baixar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\IdBaixarBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarQRCodeAsyncWithHttpInfo($body, $authorization, $gw_app_key, $id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->baixarQRCodeRequest($body, $authorization, $gw_app_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarQRCode'
     *
     * @param  \Swagger\Client\Model\IdBaixarBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function baixarQRCodeRequest($body, $authorization, $gw_app_key, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling baixarQRCode'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling baixarQRCode'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling baixarQRCode'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarQRCode'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes/{id}/baixar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }}
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultaQrCodeArrecadacao
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function consultaQrCodeArrecadacao($id, $authorization, $gw_app_key, $numero_convenio)
    {
        list($response) = $this->consultaQrCodeArrecadacaoWithHttpInfo($id, $authorization, $gw_app_key, $numero_convenio);
        return $response;
    }

    /**
     * Operation consultaQrCodeArrecadacaoWithHttpInfo
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultaQrCodeArrecadacaoWithHttpInfo($id, $authorization, $gw_app_key, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->consultaQrCodeArrecadacaoRequest($id, $authorization, $gw_app_key, $numero_convenio);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultaQrCodeArrecadacaoAsync
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultaQrCodeArrecadacaoAsync($id, $authorization, $gw_app_key, $numero_convenio)
    {
        return $this->consultaQrCodeArrecadacaoAsyncWithHttpInfo($id, $authorization, $gw_app_key, $numero_convenio)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultaQrCodeArrecadacaoAsyncWithHttpInfo
     *
     * Gerenciar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultaQrCodeArrecadacaoAsyncWithHttpInfo($id, $authorization, $gw_app_key, $numero_convenio)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->consultaQrCodeArrecadacaoRequest($id, $authorization, $gw_app_key, $numero_convenio);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultaQrCodeArrecadacao'
     *
     * @param  string $id Identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como TransactionIdentification &lt;txId&gt; ou idConciliacaoRecebedor. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e, depois de confirmado o pagamento, é enviado para o SPI via pacs.008. Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor, informando que um pagamento específico foi liquidado. (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function consultaQrCodeArrecadacaoRequest($id, $authorization, $gw_app_key, $numero_convenio)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultaQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling consultaQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling consultaQrCodeArrecadacao'
            );
        }
        // verify the required parameter 'numero_convenio' is set
        if ($numero_convenio === null || (is_array($numero_convenio) && count($numero_convenio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_convenio when calling consultaQrCodeArrecadacao'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }}
        // query params
        if ($numero_convenio !== null) {
            $queryParams['numeroConvenio'] = ObjectSerializer::toQueryValue($numero_convenio, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultaQrCodeGuiaRecolhimento
     *
     * Consultar QRCode de Pagamento Instantâneo por Guia de Recebimento
     *
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     * @param  string $codigo_guia_recebimento Código de Barras  ou outro identificador do cliente informado no momento da criação da solicitação de pagamento. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function consultaQrCodeGuiaRecolhimento($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
    {
        list($response) = $this->consultaQrCodeGuiaRecolhimentoWithHttpInfo($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento);
        return $response;
    }

    /**
     * Operation consultaQrCodeGuiaRecolhimentoWithHttpInfo
     *
     * Consultar QRCode de Pagamento Instantâneo por Guia de Recebimento
     *
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     * @param  string $codigo_guia_recebimento Código de Barras  ou outro identificador do cliente informado no momento da criação da solicitação de pagamento. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultaQrCodeGuiaRecolhimentoWithHttpInfo($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->consultaQrCodeGuiaRecolhimentoRequest($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultaQrCodeGuiaRecolhimentoAsync
     *
     * Consultar QRCode de Pagamento Instantâneo por Guia de Recebimento
     *
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     * @param  string $codigo_guia_recebimento Código de Barras  ou outro identificador do cliente informado no momento da criação da solicitação de pagamento. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultaQrCodeGuiaRecolhimentoAsync($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
    {
        return $this->consultaQrCodeGuiaRecolhimentoAsyncWithHttpInfo($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultaQrCodeGuiaRecolhimentoAsyncWithHttpInfo
     *
     * Consultar QRCode de Pagamento Instantâneo por Guia de Recebimento
     *
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     * @param  string $codigo_guia_recebimento Código de Barras  ou outro identificador do cliente informado no momento da criação da solicitação de pagamento. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultaQrCodeGuiaRecolhimentoAsyncWithHttpInfo($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->consultaQrCodeGuiaRecolhimentoRequest($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultaQrCodeGuiaRecolhimento'
     *
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     * @param  int $numero_convenio Número do convenio registrado no Banco do Brasil. (required)
     * @param  string $codigo_guia_recebimento Código de Barras  ou outro identificador do cliente informado no momento da criação da solicitação de pagamento. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function consultaQrCodeGuiaRecolhimentoRequest($authorization, $gw_app_key, $numero_convenio, $codigo_guia_recebimento)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling consultaQrCodeGuiaRecolhimento'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling consultaQrCodeGuiaRecolhimento'
            );
        }
        // verify the required parameter 'numero_convenio' is set
        if ($numero_convenio === null || (is_array($numero_convenio) && count($numero_convenio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_convenio when calling consultaQrCodeGuiaRecolhimento'
            );
        }
        // verify the required parameter 'codigo_guia_recebimento' is set
        if ($codigo_guia_recebimento === null || (is_array($codigo_guia_recebimento) && count($codigo_guia_recebimento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codigo_guia_recebimento when calling consultaQrCodeGuiaRecolhimento'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }}
        // query params
        if ($numero_convenio !== null) {
            $queryParams['numeroConvenio'] = ObjectSerializer::toQueryValue($numero_convenio, null);
        }
        // query params
        if ($codigo_guia_recebimento !== null) {
            $queryParams['codigoGuiaRecebimento'] = ObjectSerializer::toQueryValue($codigo_guia_recebimento, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation criaBoletoBancarioId
     *
     * Gerar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesBody $body body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse201
     */
    public function criaBoletoBancarioId($body, $authorization, $gw_app_key)
    {
        list($response) = $this->criaBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_app_key);
        return $response;
    }

    /**
     * Operation criaBoletoBancarioIdWithHttpInfo
     *
     * Gerar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function criaBoletoBancarioIdWithHttpInfo($body, $authorization, $gw_app_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse201';
        $request = $this->criaBoletoBancarioIdRequest($body, $authorization, $gw_app_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation criaBoletoBancarioIdAsync
     *
     * Gerar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criaBoletoBancarioIdAsync($body, $authorization, $gw_app_key)
    {
        return $this->criaBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_app_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation criaBoletoBancarioIdAsyncWithHttpInfo
     *
     * Gerar QRCode de Pagamento Instantâneo de uma Guia de Arrecadação
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criaBoletoBancarioIdAsyncWithHttpInfo($body, $authorization, $gw_app_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse201';
        $request = $this->criaBoletoBancarioIdRequest($body, $authorization, $gw_app_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'criaBoletoBancarioId'
     *
     * @param  \Swagger\Client\Model\ArrecadacaoqrcodesBody $body (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0. Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function criaBoletoBancarioIdRequest($body, $authorization, $gw_app_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling criaBoletoBancarioId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling criaBoletoBancarioId'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling criaBoletoBancarioId'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pagamentosQRCodeArrecadacao
     *
     * Consulta um pagamento vinculado ao QRCode Registrado de uma Guia de Arrecadação
     *
     * @param  string $id EndToEndIdentification que transita na PACS002, PACS004 e PACS008 (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function pagamentosQRCodeArrecadacao($id, $authorization, $gw_app_key)
    {
        list($response) = $this->pagamentosQRCodeArrecadacaoWithHttpInfo($id, $authorization, $gw_app_key);
        return $response;
    }

    /**
     * Operation pagamentosQRCodeArrecadacaoWithHttpInfo
     *
     * Consulta um pagamento vinculado ao QRCode Registrado de uma Guia de Arrecadação
     *
     * @param  string $id EndToEndIdentification que transita na PACS002, PACS004 e PACS008 (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function pagamentosQRCodeArrecadacaoWithHttpInfo($id, $authorization, $gw_app_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->pagamentosQRCodeArrecadacaoRequest($id, $authorization, $gw_app_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErroOAuthNaoAutorizado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Erro',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pagamentosQRCodeArrecadacaoAsync
     *
     * Consulta um pagamento vinculado ao QRCode Registrado de uma Guia de Arrecadação
     *
     * @param  string $id EndToEndIdentification que transita na PACS002, PACS004 e PACS008 (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagamentosQRCodeArrecadacaoAsync($id, $authorization, $gw_app_key)
    {
        return $this->pagamentosQRCodeArrecadacaoAsyncWithHttpInfo($id, $authorization, $gw_app_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pagamentosQRCodeArrecadacaoAsyncWithHttpInfo
     *
     * Consulta um pagamento vinculado ao QRCode Registrado de uma Guia de Arrecadação
     *
     * @param  string $id EndToEndIdentification que transita na PACS002, PACS004 e PACS008 (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pagamentosQRCodeArrecadacaoAsyncWithHttpInfo($id, $authorization, $gw_app_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->pagamentosQRCodeArrecadacaoRequest($id, $authorization, $gw_app_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pagamentosQRCodeArrecadacao'
     *
     * @param  string $id EndToEndIdentification que transita na PACS002, PACS004 e PACS008 (required)
     * @param  string $authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.Ex: Bearer [ACCESS_TOKEN] (required)
     * @param  string $gw_app_key É a chave de acesso do aplicativo do desenvolvedor obtida no Portal do Desenvolvedor. Essa chave será usada para identificação do aplicativo. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pagamentosQRCodeArrecadacaoRequest($id, $authorization, $gw_app_key)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pagamentosQRCodeArrecadacao'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling pagamentosQRCodeArrecadacao'
            );
        }
        // verify the required parameter 'gw_app_key' is set
        if ($gw_app_key === null || (is_array($gw_app_key) && count($gw_app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gw_app_key when calling pagamentosQRCodeArrecadacao'
            );
        }

        $resourcePath = '/arrecadacao-qrcodes/pagamentos/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gw_app_key !== null) {
            if($this->config->getAmbienteBB()=="T"){
                $queryParams['gw-dev-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }else{
                $queryParams['gw-app-key'] = ObjectSerializer::toQueryValue($gw_app_key, null);
            }}
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
